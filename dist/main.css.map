{"version":3,"sources":["webpack://front/./src/styles/styles.scss","webpack://front/./src/styles/_include-media.scss"],"names":[],"mappings":"AAEA,EACC,QAAS,CACT,SAAU,CACV,mBAKA,qBAAsB,CACtB,IAGA,cAAe,CACf,WAAY,CACZ,kBAAmB,CACnB,KAGA,8BAA+B,CAC5B,eAAgB,CACnB,iBAGG,iBAAkB,CAClB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,YAAa,CACb,YAAa,CACb,uDAAmF,CACnF,UAAW,CAad,0BArBD,iBAWQ,iBAAkB,CAClB,gBAAiB,CASxB,CC2fG,0BDhhBJ,iBAgBQ,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CAGxB,CAED,iBACI,YAAa,CACb,sBAAuB,CACvB,cAAe,CACf,cAAe,CACf,gBAAiB,CA+GpB,0BApHD,mBASY,UAAW,CAElB,CAXL,iCAcQ,sBAAuB,CAK1B,0BAnBL,iCAiBY,gBAAiB,CAExB,CAnBL,wCAsBQ,uBAAwB,CAExB,UAAW,CACX,yBAA0B,CAC1B,cAAe,CACf,iBAAkB,CA3B1B,oDA8BY,kBAAmB,CA9B/B,0CAkCY,eAAgB,CAlC5B,iCAuCQ,cAAe,CAKlB,0BA5CL,iCA0CY,iBAAkB,CAEzB,CA5CL,2CAgDQ,iBAAkB,CAClB,UAAW,CACX,SAAU,CACV,YAAa,CACb,eAAgB,CAChB,gCAAsC,CACtC,kBAAmB,CA6DtB,0BAnHL,2CAyDY,eAAgB,CA0DvB,CAnHL,iDA6DY,cAAe,CACf,aAAc,CACd,kBAAmB,CA/D/B,iDAmEY,cAAe,CACf,kBAAmB,CApE/B,wDAwEY,YAAa,CACb,kBAAmB,CACnB,cAAe,CACf,kBAAmB,CA3E/B,oDA+EY,cAAe,CACf,kBAAmB,CAhF/B,6DAoFY,YAAa,CACb,cAAe,CACf,iBAAkB,CAtF9B,qEAyFgB,UAAW,CACX,iBAAkB,CAClB,KAAM,CACN,QAAS,CACT,MAAO,CACP,aAAc,CACd,WAAY,CACZ,SAAU,CACV,wBAAyB,CAjGzC,mEAqGgB,YAAa,CACb,cAAe,CACf,WAAY,CAvG5B,2EA0GoB,aAAc,CACd,UAAW,CACX,WAAY,CACf,QAab,qBAAsB,CACtB,iBAAkB,CAClB,UAAW,CACX,eAAgB,CAsCnB,0BA1CD,QAOQ,eAAgB,CAChB,aAAc,CAkCrB,CA1CD,+BAaY,aAAc,CACjB,eAID,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,gBAAiB,CACjB,cAAe,CAClB,kBAGG,YAAa,CADhB,+BAKO,eAAgB,CALvB,qCAQW,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,gBAAiB,CACjB,yBAA0B,CAC1B,cAAe","file":"main.css","sourcesContent":["@import './include-media';\r\n\r\n* {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n*,\r\n::after,\r\n::before {\r\n\tbox-sizing: border-box;\r\n}\r\n\r\nimg {\r\n\tmax-width: 100%;\r\n\theight: auto;\r\n\tvertical-align: top;\r\n}\r\n\r\nbody {\r\n\tfont-family: 'Lato', sans-serif;\r\n    min-width: 320px;\r\n}\r\n\r\n.section-weather {\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    padding: 15px;\r\n    background: linear-gradient(to bottom,rgba(120, 107, 175, 1), rgba(40, 140, 255,1));\r\n    color: #fff;\r\n\r\n    @include media('<desktop') {\r\n        align-items: start;\r\n        min-height: 600px;\r\n    }\r\n\r\n    @include media('<tablet') {\r\n        align-items: start;\r\n        height: auto;\r\n        min-height: 825px;\r\n    }\r\n\r\n}\r\n\r\n.weather-content {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    padding: 30px 0;\r\n    min-height: 400px;\r\n\r\n    &>* {\r\n        @include media('<tablet') {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n    .select-wrapper {\r\n        padding: 35px 20px 20px;\r\n\r\n        @include media('<tablet') {\r\n            padding: 30px 0 0;\r\n        }\r\n    }\r\n\r\n    .short-weather-content {\r\n        padding: 100px 20px 20px;\r\n\r\n        color: #fff;\r\n        text-transform: capitalize;\r\n        font-size: 26px;\r\n        text-align: center;\r\n\r\n        &:first-child {\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        p {\r\n            min-width: 200px;\r\n        }\r\n    }\r\n\r\n    .weather-visual {\r\n        padding: 0 50px;\r\n\r\n        @include media('<tablet') {\r\n            text-align: center;\r\n        }\r\n    }\r\n\r\n\r\n    .extended-weather-content {\r\n        position: absolute;\r\n        bottom: 5px;\r\n        right: 5px;\r\n        padding: 20px;\r\n        max-width: 400px;\r\n        background-color: rgba($color: #000000, $alpha: .5);\r\n        border-radius: 25px;\r\n\r\n        @include media('<tablet') {\r\n            position: static;\r\n        }\r\n\r\n        .date {\r\n            font-size: 14px;\r\n            color: #E83B26;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .city {\r\n            font-size: 20px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .temperature {\r\n            display: flex;\r\n            align-items: center;\r\n            font-size: 25px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .weather {\r\n            font-size: 14px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .weather-add-info {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            position: relative;\r\n\r\n            &::before {\r\n                content: \"\";\r\n                position: absolute;\r\n                top: 0;\r\n                bottom: 0;\r\n                left: 0;\r\n                display: block;\r\n                height: 100%;\r\n                width: 2px;\r\n                background-color: #E83B26;\r\n            }\r\n\r\n            &__item {\r\n                display: flex;\r\n                font-size: 16px;\r\n                padding: 5px;\r\n\r\n                .visual {\r\n                    padding: 0 5px;\r\n                    width: 30px;\r\n                    height: 30px;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n.select {\r\n    border: 2px solid #fff;\r\n    border-radius: 5px;\r\n    color: #fff;\r\n    min-width: 180px;\r\n\r\n    @include media('<tablet') {\r\n        max-width: 400px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    &.open {\r\n        .select__dropdown {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    &__input {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 5px 10px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    &__dropdown { \r\n        display: none;\r\n        \r\n\r\n        .select-list {\r\n            list-style: none;\r\n\r\n            &__item {\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                padding: 5px 10px;\r\n                border-top: 2px solid #fff;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n}","@charset 'UTF-8';\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.1\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 998px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported \n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n/// \n/// @param {String} $message - Message to log\n///\n@function log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n/// \n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }  \n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\n  $_: log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value \n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\n    $_: log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n  \n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n  \n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n    \n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n    \n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n  \n  @return if($minus, -$result, $result);;\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n  \n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n  \n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of \n/// the call. It is helpful when having a component needing an extended \n/// configuration such as custom breakpoints (referred to as tweakpoints) \n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $tweak-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { } \n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { } \n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { } \n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { } \n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { } \n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or \n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}"],"sourceRoot":""}